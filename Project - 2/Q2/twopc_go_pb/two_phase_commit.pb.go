// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: two_phase_commit.proto

package twopc_go_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vote int32

const (
	Vote_COMMIT Vote = 0
	Vote_ABORT  Vote = 1
)

// Enum value maps for Vote.
var (
	Vote_name = map[int32]string{
		0: "COMMIT",
		1: "ABORT",
	}
	Vote_value = map[string]int32{
		"COMMIT": 0,
		"ABORT":  1,
	}
)

func (x Vote) Enum() *Vote {
	p := new(Vote)
	*p = x
	return p
}

func (x Vote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vote) Descriptor() protoreflect.EnumDescriptor {
	return file_two_phase_commit_proto_enumTypes[0].Descriptor()
}

func (Vote) Type() protoreflect.EnumType {
	return &file_two_phase_commit_proto_enumTypes[0]
}

func (x Vote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vote.Descriptor instead.
func (Vote) EnumDescriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{0}
}

type Decision int32

const (
	Decision_GLOBAL_COMMIT Decision = 0
	Decision_GLOBAL_ABORT  Decision = 1
)

// Enum value maps for Decision.
var (
	Decision_name = map[int32]string{
		0: "GLOBAL_COMMIT",
		1: "GLOBAL_ABORT",
	}
	Decision_value = map[string]int32{
		"GLOBAL_COMMIT": 0,
		"GLOBAL_ABORT":  1,
	}
)

func (x Decision) Enum() *Decision {
	p := new(Decision)
	*p = x
	return p
}

func (x Decision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Decision) Descriptor() protoreflect.EnumDescriptor {
	return file_two_phase_commit_proto_enumTypes[1].Descriptor()
}

func (Decision) Type() protoreflect.EnumType {
	return &file_two_phase_commit_proto_enumTypes[1]
}

func (x Decision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Decision.Descriptor instead.
func (Decision) EnumDescriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{1}
}

type Ack int32

const (
	Ack_SUCCESS Ack = 0
)

// Enum value maps for Ack.
var (
	Ack_name = map[int32]string{
		0: "SUCCESS",
	}
	Ack_value = map[string]int32{
		"SUCCESS": 0,
	}
)

func (x Ack) Enum() *Ack {
	p := new(Ack)
	*p = x
	return p
}

func (x Ack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ack) Descriptor() protoreflect.EnumDescriptor {
	return file_two_phase_commit_proto_enumTypes[2].Descriptor()
}

func (Ack) Type() protoreflect.EnumType {
	return &file_two_phase_commit_proto_enumTypes[2]
}

func (x Ack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ack.Descriptor instead.
func (Ack) EnumDescriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{2}
}

type VoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	mi := &file_two_phase_commit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_two_phase_commit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{0}
}

func (x *VoteRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type VoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Vote          Vote                   `protobuf:"varint,2,opt,name=vote,proto3,enum=two_phase_commit.Vote" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	mi := &file_two_phase_commit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_two_phase_commit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{1}
}

func (x *VoteResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *VoteResponse) GetVote() Vote {
	if x != nil {
		return x.Vote
	}
	return Vote_COMMIT
}

type GlobalDecisionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Decision      Decision               `protobuf:"varint,2,opt,name=decision,proto3,enum=two_phase_commit.Decision" json:"decision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalDecisionRequest) Reset() {
	*x = GlobalDecisionRequest{}
	mi := &file_two_phase_commit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDecisionRequest) ProtoMessage() {}

func (x *GlobalDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_two_phase_commit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDecisionRequest.ProtoReflect.Descriptor instead.
func (*GlobalDecisionRequest) Descriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{2}
}

func (x *GlobalDecisionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *GlobalDecisionRequest) GetDecision() Decision {
	if x != nil {
		return x.Decision
	}
	return Decision_GLOBAL_COMMIT
}

type GlobalDecisionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Ack           Ack                    `protobuf:"varint,2,opt,name=ack,proto3,enum=two_phase_commit.Ack" json:"ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalDecisionResponse) Reset() {
	*x = GlobalDecisionResponse{}
	mi := &file_two_phase_commit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalDecisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDecisionResponse) ProtoMessage() {}

func (x *GlobalDecisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_two_phase_commit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDecisionResponse.ProtoReflect.Descriptor instead.
func (*GlobalDecisionResponse) Descriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalDecisionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *GlobalDecisionResponse) GetAck() Ack {
	if x != nil {
		return x.Ack
	}
	return Ack_SUCCESS
}

type VotesReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Votes         []Vote                 `protobuf:"varint,2,rep,packed,name=votes,proto3,enum=two_phase_commit.Vote" json:"votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VotesReport) Reset() {
	*x = VotesReport{}
	mi := &file_two_phase_commit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotesReport) ProtoMessage() {}

func (x *VotesReport) ProtoReflect() protoreflect.Message {
	mi := &file_two_phase_commit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotesReport.ProtoReflect.Descriptor instead.
func (*VotesReport) Descriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{4}
}

func (x *VotesReport) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *VotesReport) GetVotes() []Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

type AckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      bool                   `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_two_phase_commit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_two_phase_commit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_two_phase_commit_proto_rawDescGZIP(), []int{5}
}

func (x *AckResponse) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

var File_two_phase_commit_proto protoreflect.FileDescriptor

var file_two_phase_commit_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x34, 0x0a, 0x0b, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x61, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x16, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x6f, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x6b,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x22, 0x62, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x77, 0x6f,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0b, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x2a, 0x1d, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x10, 0x01, 0x2a, 0x2f, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x10, 0x01, 0x2a, 0x12, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x32, 0x8e, 0x02, 0x0a, 0x0e, 0x54, 0x77, 0x6f,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x77, 0x6f,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x77, 0x6f, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x74, 0x77,
	0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x77,
	0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x77, 0x6f,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x41, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x74, 0x77, 0x6f,
	0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x74, 0x77, 0x6f, 0x70, 0x63,
	0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_two_phase_commit_proto_rawDescOnce sync.Once
	file_two_phase_commit_proto_rawDescData []byte
)

func file_two_phase_commit_proto_rawDescGZIP() []byte {
	file_two_phase_commit_proto_rawDescOnce.Do(func() {
		file_two_phase_commit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_two_phase_commit_proto_rawDesc), len(file_two_phase_commit_proto_rawDesc)))
	})
	return file_two_phase_commit_proto_rawDescData
}

var file_two_phase_commit_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_two_phase_commit_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_two_phase_commit_proto_goTypes = []any{
	(Vote)(0),                      // 0: two_phase_commit.Vote
	(Decision)(0),                  // 1: two_phase_commit.Decision
	(Ack)(0),                       // 2: two_phase_commit.Ack
	(*VoteRequest)(nil),            // 3: two_phase_commit.VoteRequest
	(*VoteResponse)(nil),           // 4: two_phase_commit.VoteResponse
	(*GlobalDecisionRequest)(nil),  // 5: two_phase_commit.GlobalDecisionRequest
	(*GlobalDecisionResponse)(nil), // 6: two_phase_commit.GlobalDecisionResponse
	(*VotesReport)(nil),            // 7: two_phase_commit.VotesReport
	(*AckResponse)(nil),            // 8: two_phase_commit.AckResponse
}
var file_two_phase_commit_proto_depIdxs = []int32{
	0, // 0: two_phase_commit.VoteResponse.vote:type_name -> two_phase_commit.Vote
	1, // 1: two_phase_commit.GlobalDecisionRequest.decision:type_name -> two_phase_commit.Decision
	2, // 2: two_phase_commit.GlobalDecisionResponse.ack:type_name -> two_phase_commit.Ack
	0, // 3: two_phase_commit.VotesReport.votes:type_name -> two_phase_commit.Vote
	3, // 4: two_phase_commit.TwoPhaseCommit.RequestVote:input_type -> two_phase_commit.VoteRequest
	5, // 5: two_phase_commit.TwoPhaseCommit.GlobalDecision:input_type -> two_phase_commit.GlobalDecisionRequest
	7, // 6: two_phase_commit.TwoPhaseCommit.SendVotes:input_type -> two_phase_commit.VotesReport
	4, // 7: two_phase_commit.TwoPhaseCommit.RequestVote:output_type -> two_phase_commit.VoteResponse
	6, // 8: two_phase_commit.TwoPhaseCommit.GlobalDecision:output_type -> two_phase_commit.GlobalDecisionResponse
	8, // 9: two_phase_commit.TwoPhaseCommit.SendVotes:output_type -> two_phase_commit.AckResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_two_phase_commit_proto_init() }
func file_two_phase_commit_proto_init() {
	if File_two_phase_commit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_two_phase_commit_proto_rawDesc), len(file_two_phase_commit_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_two_phase_commit_proto_goTypes,
		DependencyIndexes: file_two_phase_commit_proto_depIdxs,
		EnumInfos:         file_two_phase_commit_proto_enumTypes,
		MessageInfos:      file_two_phase_commit_proto_msgTypes,
	}.Build()
	File_two_phase_commit_proto = out.File
	file_two_phase_commit_proto_goTypes = nil
	file_two_phase_commit_proto_depIdxs = nil
}
