Test Case 1: New Node Joining the Cluster
        This test case demonstrates the ability of a new node to join an existing cluster.
        Start the cluster with 4 nodes (node1, node2, node3, node4).
        After a short delay, start node5 and have it join the cluster.
        Verify that node5 is added to the membership list of all existing nodes.
    Implementation:
        Modify your Docker Compose file to start only 4 nodes initially.
        Add a delay, then start node5 with a command to join the cluster.
        Check the logs of all nodes to confirm node5 is added to their membership lists.

Test Case 2: Node Failure Detection
        This test case verifies the failure detection mechanism.
        Start all 5 nodes.
        Manually stop one node (e.g., node3).
        Observe if the remaining nodes detect the failure and update their membership lists.
    Implementation:
        Start all nodes using Docker Compose.
        Use docker stop node3 to simulate a node failure.
        Check the logs of other nodes to see if they detect and report the failure.

Test Case 3: Node Failure Before Node6 Joins
        Ensures that failed nodes are promptly detected and removed.
        Validates that the updated membership list accurately reflects the current cluster state.
        Confirms that new nodes bootstrap using the correct, consistent membership information.
    Implementation:
        Bring up nodes 1–5 using your docker‑compose file. Verify via logs that each node’s DC has parsed its full membership list (e.g. [1,2,3,4,5]) and that FDs are actively pinging.
        Observe if other nodes use indirect pings to confirm node2's status.
        Stop one node (e.g., node3) to simulate failure; Confirm in the logs of the remaining nodes that they detect node3’s failure (via BroadcastFailure) and update their membership lists to exclude node3.
        Update node6’s environment to start with an empty membership (MEMBERSHIP: ""). Then start node6; Node6 should contact its bootstrap node (e.g., node2) and receive the current membership list (e.g. [1,2,4,5]).
        Check node6’s logs for a message indicating that it updated its membership from the bootstrap node, which should now exclude the failed node.


Test Case 4: Membership List Consistency
        This test case ensures that all nodes maintain consistent membership lists.
        Start all 5 nodes.
        Introduce changes (join/leave) to the cluster.
        After a short delay, verify that all nodes have identical membership lists.
    Implementation:
        Start all nodes, then add or remove a node.
        Add a function to print the current membership list for each node.
        Compare the membership lists across all nodes after changes.

Test Case 5: Multiple Simultaneous Failures
        This test case tests the system's resilience to multiple node failures.
        Start all 5 nodes.
        Simultaneously stop multiple nodes (e.g., node2 and node4).
        Verify that the remaining nodes correctly update their membership lists.
    Implementation:
        Start all nodes using Docker Compose.
        Use docker stop node2 node4 to simulate multiple failures.
        Check the logs and membership lists of remaining nodes to ensure they've correctly removed the failed nodes.
