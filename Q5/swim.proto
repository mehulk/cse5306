syntax = "proto3";

package swim;

option go_package = "./swim";

import "google/protobuf/empty.proto";

// The service holds both FD (Ping/IndirectPing) and
// Dissemination (Join, BroadcastFailure, StreamMembership) RPCs.
service SwimService {
  // Failure Detector RPCs:
  rpc Ping (PingRequest) returns (PingResponse) {}
  rpc IndirectPing (IndirectPingRequest) returns (IndirectPingResponse) {}

  // Dissemination RPCs:
  rpc Join (JoinRequest) returns (JoinResponse) {}
  rpc BroadcastFailure (BroadcastFailureRequest) returns (BroadcastFailureResponse) {}
  // New: DC pushes membership updates via streaming.
  rpc StreamMembership(google.protobuf.Empty) returns (stream JoinResponse) {}
}

message PingRequest {
  int32 sender_id = 1;
}

message PingResponse {
  int32 sender_id = 1;
}

message IndirectPingRequest {
  int32 sender_id = 1;
  int32 target_id = 2;
}

message IndirectPingResponse {
  int32 sender_id = 1;
  bool success = 2;
}

message JoinRequest {
  int32 sender_id = 1;
  string host = 2;
  int32 port = 3;
}

message JoinResponse {
  repeated NodeInfo membership_list = 1;
}

message BroadcastFailureRequest {
  int32 sender_id = 1;
  int32 failed_node_id = 2;
}

message BroadcastFailureResponse {
  bool success = 1;
}

message NodeInfo {
  int32 node_id = 1;
  string host = 2;
  int32 port = 3;
}
