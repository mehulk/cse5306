// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: swim.proto

package swim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SwimService_Ping_FullMethodName             = "/swim.SwimService/Ping"
	SwimService_IndirectPing_FullMethodName     = "/swim.SwimService/IndirectPing"
	SwimService_Join_FullMethodName             = "/swim.SwimService/Join"
	SwimService_BroadcastFailure_FullMethodName = "/swim.SwimService/BroadcastFailure"
	SwimService_StreamMembership_FullMethodName = "/swim.SwimService/StreamMembership"
)

// SwimServiceClient is the client API for SwimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service holds both FD (Ping/IndirectPing) and
// Dissemination (Join, BroadcastFailure, StreamMembership) RPCs.
type SwimServiceClient interface {
	// Failure Detector RPCs:
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	IndirectPing(ctx context.Context, in *IndirectPingRequest, opts ...grpc.CallOption) (*IndirectPingResponse, error)
	// Dissemination RPCs:
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	BroadcastFailure(ctx context.Context, in *BroadcastFailureRequest, opts ...grpc.CallOption) (*BroadcastFailureResponse, error)
	// New: DC pushes membership updates via streaming.
	StreamMembership(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinResponse], error)
}

type swimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwimServiceClient(cc grpc.ClientConnInterface) SwimServiceClient {
	return &swimServiceClient{cc}
}

func (c *swimServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SwimService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) IndirectPing(ctx context.Context, in *IndirectPingRequest, opts ...grpc.CallOption) (*IndirectPingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndirectPingResponse)
	err := c.cc.Invoke(ctx, SwimService_IndirectPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, SwimService_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) BroadcastFailure(ctx context.Context, in *BroadcastFailureRequest, opts ...grpc.CallOption) (*BroadcastFailureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastFailureResponse)
	err := c.cc.Invoke(ctx, SwimService_BroadcastFailure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) StreamMembership(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SwimService_ServiceDesc.Streams[0], SwimService_StreamMembership_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, JoinResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SwimService_StreamMembershipClient = grpc.ServerStreamingClient[JoinResponse]

// SwimServiceServer is the server API for SwimService service.
// All implementations must embed UnimplementedSwimServiceServer
// for forward compatibility.
//
// The service holds both FD (Ping/IndirectPing) and
// Dissemination (Join, BroadcastFailure, StreamMembership) RPCs.
type SwimServiceServer interface {
	// Failure Detector RPCs:
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	IndirectPing(context.Context, *IndirectPingRequest) (*IndirectPingResponse, error)
	// Dissemination RPCs:
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	BroadcastFailure(context.Context, *BroadcastFailureRequest) (*BroadcastFailureResponse, error)
	// New: DC pushes membership updates via streaming.
	StreamMembership(*emptypb.Empty, grpc.ServerStreamingServer[JoinResponse]) error
	mustEmbedUnimplementedSwimServiceServer()
}

// UnimplementedSwimServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwimServiceServer struct{}

func (UnimplementedSwimServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSwimServiceServer) IndirectPing(context.Context, *IndirectPingRequest) (*IndirectPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndirectPing not implemented")
}
func (UnimplementedSwimServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedSwimServiceServer) BroadcastFailure(context.Context, *BroadcastFailureRequest) (*BroadcastFailureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastFailure not implemented")
}
func (UnimplementedSwimServiceServer) StreamMembership(*emptypb.Empty, grpc.ServerStreamingServer[JoinResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMembership not implemented")
}
func (UnimplementedSwimServiceServer) mustEmbedUnimplementedSwimServiceServer() {}
func (UnimplementedSwimServiceServer) testEmbeddedByValue()                     {}

// UnsafeSwimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwimServiceServer will
// result in compilation errors.
type UnsafeSwimServiceServer interface {
	mustEmbedUnimplementedSwimServiceServer()
}

func RegisterSwimServiceServer(s grpc.ServiceRegistrar, srv SwimServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwimServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwimService_ServiceDesc, srv)
}

func _SwimService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwimService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_IndirectPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndirectPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).IndirectPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwimService_IndirectPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).IndirectPing(ctx, req.(*IndirectPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwimService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_BroadcastFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastFailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).BroadcastFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwimService_BroadcastFailure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).BroadcastFailure(ctx, req.(*BroadcastFailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_StreamMembership_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwimServiceServer).StreamMembership(m, &grpc.GenericServerStream[emptypb.Empty, JoinResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SwimService_StreamMembershipServer = grpc.ServerStreamingServer[JoinResponse]

// SwimService_ServiceDesc is the grpc.ServiceDesc for SwimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swim.SwimService",
	HandlerType: (*SwimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SwimService_Ping_Handler,
		},
		{
			MethodName: "IndirectPing",
			Handler:    _SwimService_IndirectPing_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _SwimService_Join_Handler,
		},
		{
			MethodName: "BroadcastFailure",
			Handler:    _SwimService_BroadcastFailure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMembership",
			Handler:       _SwimService_StreamMembership_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "swim.proto",
}
